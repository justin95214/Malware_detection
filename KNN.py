
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
import  matplotlib.pyplot as plt


csv_data = pd.read_csv("C:/Users/user/Desktop/연구/숭실대_국보연/AMD4.csv", sep =',')
#19750개 데이터
csv_data1 = pd.read_csv("C:/Users/user/Desktop/연구/숭실대_국보연/AMD4.csv", sep =',')
print("-------------------------#데이터확인 #-------------------------------")

print(type(csv_data))
#print(csv_data1)
print(csv_data.shape)
print(type(csv_data))
print(csv_data)

print(csv_data.shape)
print(csv_data.columns)

datacount = 24372

print("####################### 1.데이터셋 전처리 ####################################################")

csv_data = csv_data.drop('family', axis= 1)
csv_data =  csv_data.drop('AMD_family', axis= 1)
csv_data =  csv_data.drop('AMD_type', axis= 1)

print( csv_data.shape)

for i in  csv_data.columns :
    count_check =0
    #print(new_data[i][0])
    #print("----------------")
    for j in range(0,datacount):
        if csv_data[i][j] == 0:
            count_check = count_check+1
        if count_check ==datacount:
            csv_data =  csv_data.drop(i,axis= 1)
            #print(i)

df = pd.DataFrame(columns=['columns'])
df['columns'] = csv_data.columns
df.to_csv("KNN_columns.csv", mode='w')

print("-------------------------#데이터확인 #--------------------------------")
print( csv_data)
print( csv_data.shape)

print("dataset의 키: \n{}".format( csv_data.keys()))
# dict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names'])

# target_
print("타깃의 이름 : {}".format(csv_data1['AMD_family']))
# 타깃의 이름 : ['setosa' 'versicolor' 'virginica']

# feature_names
print("특성의 이름 : \n{}".format( csv_data))
# ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

print("target의 타입: {}".format(type(csv_data1['AMD_type'])))
print("target의  크기: {}".format(csv_data1['AMD_type'].shape))

Y_obj = csv_data1['AMD_type']
e =LabelEncoder()
e.fit(Y_obj)
Y = e.transform(Y_obj)



range1 = []
#2,5,6,8,9,10
#0,2,3,5,8,11 -1480
#0,1,2,5,6,7,11 -500
#0,1,4,5,6,7,8,11



for y_target in range(0,datacount) :
    for a in range(0,len(range1)) :
        if Y[y_target] == range1[a] :
            Y[y_target] =12

print(Y)

checkinglast =[]
for a in range(0,126) :
    checkinglast.append(csv_data.columns[a])

print("check {}".format(checkinglast))

scaler = MinMaxScaler()
csv_data[checkinglast] = scaler.fit_transform(csv_data[checkinglast])
X2 = csv_data.astype(float)
"""
scaler = MinMaxScaler()
csv_data = scaler.fit_transform(csv_data)
X2 = csv_data.astype(float)
"""

#Y_encoded = np_utils.to_categorical(Y)
X_train, X_test, y_train,y_test = train_test_split(X2,Y,random_state=0, test_size= 0.2 )

# train_test_split 함수로 데이터를 나누기 전에 유사 난수 생성기를 사용해 데이터셋을 무작위로 섞는다.
# 데이터 포인트가 잘 섞여야 일반화에 좋다.

print("X_train 의 크기 : {}".format(X_train.shape))
print("y_train 의 크기 : {}".format(y_train.shape))

print("X_test 의 크기 : {}".format(X_test.shape))
print("y_test 의 크기 : {}".format(y_test.shape))




# X_train 데이터를 사용해서 데이터 프레임을 만든다
train_accuracy = []
test_accuracy = []

# 4. k-최근접 이웃 알고리즘s
# 우선 이웃의 개수
from sklearn.neighbors import KNeighborsClassifier
settings = range(1,11)
for n_neighbors  in settings :

    knn = KNeighborsClassifier(n_neighbors)
    print(type(X_train))
    # 훈련 데이터셋으로부터 모델을 만들려면 knn 객체의 fit 메서드를 사용한다.
    X_train = np.nan_to_num(X_train, copy=False)


    knn.fit(X_train,y_train)
    KNeighborsClassifier(algorithm='auto', leaf_size=20, metric='minkowski',metric_params=None, n_jobs=1, n_neighbors=n_neighbors,  p=2,weights='uniform')

    # fit 메서드는 knn 객체 자체를 반환한다.
    train_accuracy.append( knn.score(X_train,y_train))
    test_accuracy.append(knn.score(X_test,y_test))

    print(" k = {} 테스트 세트의 정확도 : {:.3f}".format(n_neighbors,knn.score(X_test, y_test)))



plt.plot(settings, train_accuracy, label ="train")
plt.plot(settings,test_accuracy, label = "test_p")
plt.ylabel("정확도")
plt.xlabel("n_neighbors")


plt.show()